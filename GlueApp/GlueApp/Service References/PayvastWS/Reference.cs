//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GlueApp.PayvastWS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PayvastWS.AccountingServiceSoap")]
    public interface AccountingServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddLegalCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddLegalCustomer(
                    int fiscalPeriod, 
                    string name, 
                    string title, 
                    string nationalIdentiry, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string management, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddLegalCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddLegalCustomerAsync(
                    int fiscalPeriod, 
                    string name, 
                    string title, 
                    string nationalIdentiry, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string management, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddRealCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddRealCustomer(
                    int fiscalPeriod, 
                    string Firstname, 
                    string lastName, 
                    string title, 
                    string nationalCode, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string fatherName, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddRealCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddRealCustomerAsync(
                    int fiscalPeriod, 
                    string Firstname, 
                    string lastName, 
                    string title, 
                    string nationalCode, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string fatherName, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GlueApp.PayvastWS.CustomerType[] GetCustomerTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GlueApp.PayvastWS.CustomerType[]> GetCustomerTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFactor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CreateFactor(int number, System.DateTime date, int customerId, int referenceNumber, string description, string customString1, string floatingAccount, int factorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFactor", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CreateFactorAsync(int number, System.DateTime date, int customerId, int referenceNumber, string description, string customString1, string floatingAccount, int factorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddArticle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddArticle(int factorId, int merchandiseId, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddArticle", ReplyAction="*")]
        System.Threading.Tasks.Task AddArticleAsync(int factorId, int merchandiseId, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddArticleByCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddArticleByCode(int factorId, string merchandiseCode, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddArticleByCode", ReplyAction="*")]
        System.Threading.Tasks.Task AddArticleByCodeAsync(int factorId, string merchandiseCode, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddCost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddCost(int factorId, decimal amount, string account, bool isIncremental, string description, string floatingAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddCost", ReplyAction="*")]
        System.Threading.Tasks.Task AddCostAsync(int factorId, decimal amount, string account, bool isIncremental, string description, string floatingAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitFactor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CommitFactor(int factorId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitFactor", ReplyAction="*")]
        System.Threading.Tasks.Task CommitFactorAsync(int factorId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateReceiptOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CreateReceiptOrder(int no, int type, System.DateTime date, int reference, int stockRoom, int referenceNo, string description, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateReceiptOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CreateReceiptOrderAsync(int no, int type, System.DateTime date, int reference, int stockRoom, int referenceNo, string description, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddReceiptOrderArticle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddReceiptOrderArticle(int receiptOrderId, int merchandiseId, int amount, int unitId, int unitPrice, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddReceiptOrderArticle", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddReceiptOrderArticleAsync(int receiptOrderId, int merchandiseId, int amount, int unitId, int unitPrice, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddReceiptOrderSerial", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddReceiptOrderSerial(int receiptOrderId, int receiptOrderArticleId, string serial, System.DateTime expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddReceiptOrderSerial", ReplyAction="*")]
        System.Threading.Tasks.Task AddReceiptOrderSerialAsync(int receiptOrderId, int receiptOrderArticleId, string serial, System.DateTime expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitReceiptOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CommitReceiptOrder(int receiptOrderId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitReceiptOrder", ReplyAction="*")]
        System.Threading.Tasks.Task CommitReceiptOrderAsync(int receiptOrderId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandise", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddMerchandise(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandise", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddMerchandiseAsync(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandiseReturnsCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddMerchandiseReturnsCode(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandiseReturnsCode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddMerchandiseReturnsCodeAsync(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseRemainForAllStockRooms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double GetMerchandiseRemainForAllStockRooms(string merchandiseCode, System.DateTime date, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseRemainForAllStockRooms", ReplyAction="*")]
        System.Threading.Tasks.Task<double> GetMerchandiseRemainForAllStockRoomsAsync(string merchandiseCode, System.DateTime date, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseRemain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double GetMerchandiseRemain(string merchandiseCode, System.DateTime date, int fiscalPeriod, int stockRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseRemain", ReplyAction="*")]
        System.Threading.Tasks.Task<double> GetMerchandiseRemainAsync(string merchandiseCode, System.DateTime date, int fiscalPeriod, int stockRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseLastBuyRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetMerchandiseLastBuyRate(string merchandiseCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseLastBuyRate", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetMerchandiseLastBuyRateAsync(string merchandiseCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandiseUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddMerchandiseUnit(string name, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddMerchandiseUnit", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddMerchandiseUnitAsync(string name, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GlueApp.PayvastWS.Merchandise[] GetMerchandiseList(int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMerchandiseList", ReplyAction="*")]
        System.Threading.Tasks.Task<GlueApp.PayvastWS.Merchandise[]> GetMerchandiseListAsync(int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateAccountingTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CreateAccountingTransaction(int number, System.DateTime date, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateAccountingTransaction", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CreateAccountingTransactionAsync(int number, System.DateTime date, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddAccountingArticle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddAccountingArticle(int transactionId, double debit, double credit, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddAccountingArticle", ReplyAction="*")]
        System.Threading.Tasks.Task AddAccountingArticleAsync(int transactionId, double debit, double credit, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitAccountingTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CommitAccountingTransaction(int transactionId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CommitAccountingTransaction", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CommitAccountingTransactionAsync(int transactionId, int fiscalPeriod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountBalance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double GetAccountBalance(int fiscalPeriod, System.DateTime date, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountBalance", ReplyAction="*")]
        System.Threading.Tasks.Task<double> GetAccountBalanceAsync(int fiscalPeriod, System.DateTime date, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountTransactions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GlueApp.PayvastWS.AccountTransaction[] GetAccountTransactions(int fiscalPeriod, System.DateTime startDate, System.DateTime endDate, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountTransactions", ReplyAction="*")]
        System.Threading.Tasks.Task<GlueApp.PayvastWS.AccountTransaction[]> GetAccountTransactionsAsync(int fiscalPeriod, System.DateTime startDate, System.DateTime endDate, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddAccount(string parentCode, int fiscalPeriod, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddAccountAsync(string parentCode, int fiscalPeriod, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFloatingAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddFloatingAccount(string parentCode, int fiscalPeriod, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFloatingAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddFloatingAccountAsync(string parentCode, int fiscalPeriod, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFloatingAccountWithSpecifiedCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddFloatingAccountWithSpecifiedCode(string parentCode, string code, int fiscalPeriod, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFloatingAccountWithSpecifiedCode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddFloatingAccountWithSpecifiedCodeAsync(string parentCode, string code, int fiscalPeriod, string name);
        
        // CODEGEN: Parameter 'GetFiscalPeriodIdResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFiscalPeriodId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GlueApp.PayvastWS.GetFiscalPeriodIdResponse GetFiscalPeriodId(GlueApp.PayvastWS.GetFiscalPeriodIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFiscalPeriodId", ReplyAction="*")]
        System.Threading.Tasks.Task<GlueApp.PayvastWS.GetFiscalPeriodIdResponse> GetFiscalPeriodIdAsync(GlueApp.PayvastWS.GetFiscalPeriodIdRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CustomerType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int codeField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AccountTransaction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int transactionNumberField;
        
        private System.DateTime transactionDateField;
        
        private string articleDescrioptionField;
        
        private double debitField;
        
        private double creditField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int TransactionNumber {
            get {
                return this.transactionNumberField;
            }
            set {
                this.transactionNumberField = value;
                this.RaisePropertyChanged("TransactionNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ArticleDescrioption {
            get {
                return this.articleDescrioptionField;
            }
            set {
                this.articleDescrioptionField = value;
                this.RaisePropertyChanged("ArticleDescrioption");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Debit {
            get {
                return this.debitField;
            }
            set {
                this.debitField = value;
                this.RaisePropertyChanged("Debit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public double Credit {
            get {
                return this.creditField;
            }
            set {
                this.creditField = value;
                this.RaisePropertyChanged("Credit");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Merchandise : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string codeField;
        
        private string nameField;
        
        private string englishNameField;
        
        private string technicalCodeField;
        
        private string barcodeField;
        
        private string iranCodeField;
        
        private int unitIdField;
        
        private string unitField;
        
        private int fiscalPeriodField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
                this.RaisePropertyChanged("Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string EnglishName {
            get {
                return this.englishNameField;
            }
            set {
                this.englishNameField = value;
                this.RaisePropertyChanged("EnglishName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string TechnicalCode {
            get {
                return this.technicalCodeField;
            }
            set {
                this.technicalCodeField = value;
                this.RaisePropertyChanged("TechnicalCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
                this.RaisePropertyChanged("Barcode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string IranCode {
            get {
                return this.iranCodeField;
            }
            set {
                this.iranCodeField = value;
                this.RaisePropertyChanged("IranCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int UnitId {
            get {
                return this.unitIdField;
            }
            set {
                this.unitIdField = value;
                this.RaisePropertyChanged("UnitId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
                this.RaisePropertyChanged("Unit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int FiscalPeriod {
            get {
                return this.fiscalPeriodField;
            }
            set {
                this.fiscalPeriodField = value;
                this.RaisePropertyChanged("FiscalPeriod");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFiscalPeriodId", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetFiscalPeriodIdRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> date;
        
        public GetFiscalPeriodIdRequest() {
        }
        
        public GetFiscalPeriodIdRequest(System.Nullable<System.DateTime> date) {
            this.date = date;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFiscalPeriodIdResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetFiscalPeriodIdResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GetFiscalPeriodIdResult;
        
        public GetFiscalPeriodIdResponse() {
        }
        
        public GetFiscalPeriodIdResponse(System.Nullable<int> GetFiscalPeriodIdResult) {
            this.GetFiscalPeriodIdResult = GetFiscalPeriodIdResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AccountingServiceSoapChannel : GlueApp.PayvastWS.AccountingServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountingServiceSoapClient : System.ServiceModel.ClientBase<GlueApp.PayvastWS.AccountingServiceSoap>, GlueApp.PayvastWS.AccountingServiceSoap {
        
        public AccountingServiceSoapClient() {
        }
        
        public AccountingServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountingServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountingServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountingServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddLegalCustomer(
                    int fiscalPeriod, 
                    string name, 
                    string title, 
                    string nationalIdentiry, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string management, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type) {
            return base.Channel.AddLegalCustomer(fiscalPeriod, name, title, nationalIdentiry, phone, fax, cellPhone, management, registerationNumber, registrationLocation, registrationDate, subscriptionCode, zipCode, econumicCode, credit, email, address, description, parentAccountId, parentFloatingAccountId, type);
        }
        
        public System.Threading.Tasks.Task<int> AddLegalCustomerAsync(
                    int fiscalPeriod, 
                    string name, 
                    string title, 
                    string nationalIdentiry, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string management, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type) {
            return base.Channel.AddLegalCustomerAsync(fiscalPeriod, name, title, nationalIdentiry, phone, fax, cellPhone, management, registerationNumber, registrationLocation, registrationDate, subscriptionCode, zipCode, econumicCode, credit, email, address, description, parentAccountId, parentFloatingAccountId, type);
        }
        
        public int AddRealCustomer(
                    int fiscalPeriod, 
                    string Firstname, 
                    string lastName, 
                    string title, 
                    string nationalCode, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string fatherName, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type) {
            return base.Channel.AddRealCustomer(fiscalPeriod, Firstname, lastName, title, nationalCode, phone, fax, cellPhone, fatherName, registerationNumber, registrationLocation, registrationDate, subscriptionCode, zipCode, econumicCode, credit, email, address, description, parentAccountId, parentFloatingAccountId, type);
        }
        
        public System.Threading.Tasks.Task<int> AddRealCustomerAsync(
                    int fiscalPeriod, 
                    string Firstname, 
                    string lastName, 
                    string title, 
                    string nationalCode, 
                    string phone, 
                    string fax, 
                    string cellPhone, 
                    string fatherName, 
                    string registerationNumber, 
                    int registrationLocation, 
                    System.DateTime registrationDate, 
                    int subscriptionCode, 
                    string zipCode, 
                    string econumicCode, 
                    double credit, 
                    string email, 
                    string address, 
                    string description, 
                    string parentAccountId, 
                    string parentFloatingAccountId, 
                    int type) {
            return base.Channel.AddRealCustomerAsync(fiscalPeriod, Firstname, lastName, title, nationalCode, phone, fax, cellPhone, fatherName, registerationNumber, registrationLocation, registrationDate, subscriptionCode, zipCode, econumicCode, credit, email, address, description, parentAccountId, parentFloatingAccountId, type);
        }
        
        public GlueApp.PayvastWS.CustomerType[] GetCustomerTypes() {
            return base.Channel.GetCustomerTypes();
        }
        
        public System.Threading.Tasks.Task<GlueApp.PayvastWS.CustomerType[]> GetCustomerTypesAsync() {
            return base.Channel.GetCustomerTypesAsync();
        }
        
        public int CreateFactor(int number, System.DateTime date, int customerId, int referenceNumber, string description, string customString1, string floatingAccount, int factorType) {
            return base.Channel.CreateFactor(number, date, customerId, referenceNumber, description, customString1, floatingAccount, factorType);
        }
        
        public System.Threading.Tasks.Task<int> CreateFactorAsync(int number, System.DateTime date, int customerId, int referenceNumber, string description, string customString1, string floatingAccount, int factorType) {
            return base.Channel.CreateFactorAsync(number, date, customerId, referenceNumber, description, customString1, floatingAccount, factorType);
        }
        
        public void AddArticle(int factorId, int merchandiseId, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description) {
            base.Channel.AddArticle(factorId, merchandiseId, amount, unitId, unitPrice, auxAmount, vTax, discount, stockRoomId, description);
        }
        
        public System.Threading.Tasks.Task AddArticleAsync(int factorId, int merchandiseId, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description) {
            return base.Channel.AddArticleAsync(factorId, merchandiseId, amount, unitId, unitPrice, auxAmount, vTax, discount, stockRoomId, description);
        }
        
        public void AddArticleByCode(int factorId, string merchandiseCode, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description) {
            base.Channel.AddArticleByCode(factorId, merchandiseCode, amount, unitId, unitPrice, auxAmount, vTax, discount, stockRoomId, description);
        }
        
        public System.Threading.Tasks.Task AddArticleByCodeAsync(int factorId, string merchandiseCode, int amount, int unitId, decimal unitPrice, int auxAmount, decimal vTax, decimal discount, int stockRoomId, string description) {
            return base.Channel.AddArticleByCodeAsync(factorId, merchandiseCode, amount, unitId, unitPrice, auxAmount, vTax, discount, stockRoomId, description);
        }
        
        public void AddCost(int factorId, decimal amount, string account, bool isIncremental, string description, string floatingAccount) {
            base.Channel.AddCost(factorId, amount, account, isIncremental, description, floatingAccount);
        }
        
        public System.Threading.Tasks.Task AddCostAsync(int factorId, decimal amount, string account, bool isIncremental, string description, string floatingAccount) {
            return base.Channel.AddCostAsync(factorId, amount, account, isIncremental, description, floatingAccount);
        }
        
        public void CommitFactor(int factorId, int fiscalPeriod) {
            base.Channel.CommitFactor(factorId, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task CommitFactorAsync(int factorId, int fiscalPeriod) {
            return base.Channel.CommitFactorAsync(factorId, fiscalPeriod);
        }
        
        public int CreateReceiptOrder(int no, int type, System.DateTime date, int reference, int stockRoom, int referenceNo, string description, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, int customerId) {
            return base.Channel.CreateReceiptOrder(no, type, date, reference, stockRoom, referenceNo, description, account, floatingAccount1, floatingAccount2, floatingAccount3, floatingAccount4, floatingAccount5, customerId);
        }
        
        public System.Threading.Tasks.Task<int> CreateReceiptOrderAsync(int no, int type, System.DateTime date, int reference, int stockRoom, int referenceNo, string description, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, int customerId) {
            return base.Channel.CreateReceiptOrderAsync(no, type, date, reference, stockRoom, referenceNo, description, account, floatingAccount1, floatingAccount2, floatingAccount3, floatingAccount4, floatingAccount5, customerId);
        }
        
        public int AddReceiptOrderArticle(int receiptOrderId, int merchandiseId, int amount, int unitId, int unitPrice, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, string description) {
            return base.Channel.AddReceiptOrderArticle(receiptOrderId, merchandiseId, amount, unitId, unitPrice, account, floatingAccount1, floatingAccount2, floatingAccount3, floatingAccount4, floatingAccount5, description);
        }
        
        public System.Threading.Tasks.Task<int> AddReceiptOrderArticleAsync(int receiptOrderId, int merchandiseId, int amount, int unitId, int unitPrice, string account, string floatingAccount1, string floatingAccount2, string floatingAccount3, string floatingAccount4, string floatingAccount5, string description) {
            return base.Channel.AddReceiptOrderArticleAsync(receiptOrderId, merchandiseId, amount, unitId, unitPrice, account, floatingAccount1, floatingAccount2, floatingAccount3, floatingAccount4, floatingAccount5, description);
        }
        
        public void AddReceiptOrderSerial(int receiptOrderId, int receiptOrderArticleId, string serial, System.DateTime expiryDate) {
            base.Channel.AddReceiptOrderSerial(receiptOrderId, receiptOrderArticleId, serial, expiryDate);
        }
        
        public System.Threading.Tasks.Task AddReceiptOrderSerialAsync(int receiptOrderId, int receiptOrderArticleId, string serial, System.DateTime expiryDate) {
            return base.Channel.AddReceiptOrderSerialAsync(receiptOrderId, receiptOrderArticleId, serial, expiryDate);
        }
        
        public void CommitReceiptOrder(int receiptOrderId, int fiscalPeriod) {
            base.Channel.CommitReceiptOrder(receiptOrderId, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task CommitReceiptOrderAsync(int receiptOrderId, int fiscalPeriod) {
            return base.Channel.CommitReceiptOrderAsync(receiptOrderId, fiscalPeriod);
        }
        
        public int AddMerchandise(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod) {
            return base.Channel.AddMerchandise(parentCode, name, technicalNumber, unitId, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<int> AddMerchandiseAsync(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod) {
            return base.Channel.AddMerchandiseAsync(parentCode, name, technicalNumber, unitId, fiscalPeriod);
        }
        
        public string AddMerchandiseReturnsCode(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod) {
            return base.Channel.AddMerchandiseReturnsCode(parentCode, name, technicalNumber, unitId, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<string> AddMerchandiseReturnsCodeAsync(string parentCode, string name, string technicalNumber, int unitId, int fiscalPeriod) {
            return base.Channel.AddMerchandiseReturnsCodeAsync(parentCode, name, technicalNumber, unitId, fiscalPeriod);
        }
        
        public double GetMerchandiseRemainForAllStockRooms(string merchandiseCode, System.DateTime date, int fiscalPeriod) {
            return base.Channel.GetMerchandiseRemainForAllStockRooms(merchandiseCode, date, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<double> GetMerchandiseRemainForAllStockRoomsAsync(string merchandiseCode, System.DateTime date, int fiscalPeriod) {
            return base.Channel.GetMerchandiseRemainForAllStockRoomsAsync(merchandiseCode, date, fiscalPeriod);
        }
        
        public double GetMerchandiseRemain(string merchandiseCode, System.DateTime date, int fiscalPeriod, int stockRoomId) {
            return base.Channel.GetMerchandiseRemain(merchandiseCode, date, fiscalPeriod, stockRoomId);
        }
        
        public System.Threading.Tasks.Task<double> GetMerchandiseRemainAsync(string merchandiseCode, System.DateTime date, int fiscalPeriod, int stockRoomId) {
            return base.Channel.GetMerchandiseRemainAsync(merchandiseCode, date, fiscalPeriod, stockRoomId);
        }
        
        public int GetMerchandiseLastBuyRate(string merchandiseCode) {
            return base.Channel.GetMerchandiseLastBuyRate(merchandiseCode);
        }
        
        public System.Threading.Tasks.Task<int> GetMerchandiseLastBuyRateAsync(string merchandiseCode) {
            return base.Channel.GetMerchandiseLastBuyRateAsync(merchandiseCode);
        }
        
        public int AddMerchandiseUnit(string name, int fiscalPeriod) {
            return base.Channel.AddMerchandiseUnit(name, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<int> AddMerchandiseUnitAsync(string name, int fiscalPeriod) {
            return base.Channel.AddMerchandiseUnitAsync(name, fiscalPeriod);
        }
        
        public GlueApp.PayvastWS.Merchandise[] GetMerchandiseList(int fiscalPeriod) {
            return base.Channel.GetMerchandiseList(fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<GlueApp.PayvastWS.Merchandise[]> GetMerchandiseListAsync(int fiscalPeriod) {
            return base.Channel.GetMerchandiseListAsync(fiscalPeriod);
        }
        
        public int CreateAccountingTransaction(int number, System.DateTime date, string description) {
            return base.Channel.CreateAccountingTransaction(number, date, description);
        }
        
        public System.Threading.Tasks.Task<int> CreateAccountingTransactionAsync(int number, System.DateTime date, string description) {
            return base.Channel.CreateAccountingTransactionAsync(number, date, description);
        }
        
        public void AddAccountingArticle(int transactionId, double debit, double credit, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            base.Channel.AddAccountingArticle(transactionId, debit, credit, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public System.Threading.Tasks.Task AddAccountingArticleAsync(int transactionId, double debit, double credit, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            return base.Channel.AddAccountingArticleAsync(transactionId, debit, credit, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public int CommitAccountingTransaction(int transactionId, int fiscalPeriod) {
            return base.Channel.CommitAccountingTransaction(transactionId, fiscalPeriod);
        }
        
        public System.Threading.Tasks.Task<int> CommitAccountingTransactionAsync(int transactionId, int fiscalPeriod) {
            return base.Channel.CommitAccountingTransactionAsync(transactionId, fiscalPeriod);
        }
        
        public double GetAccountBalance(int fiscalPeriod, System.DateTime date, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            return base.Channel.GetAccountBalance(fiscalPeriod, date, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public System.Threading.Tasks.Task<double> GetAccountBalanceAsync(int fiscalPeriod, System.DateTime date, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            return base.Channel.GetAccountBalanceAsync(fiscalPeriod, date, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public GlueApp.PayvastWS.AccountTransaction[] GetAccountTransactions(int fiscalPeriod, System.DateTime startDate, System.DateTime endDate, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            return base.Channel.GetAccountTransactions(fiscalPeriod, startDate, endDate, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public System.Threading.Tasks.Task<GlueApp.PayvastWS.AccountTransaction[]> GetAccountTransactionsAsync(int fiscalPeriod, System.DateTime startDate, System.DateTime endDate, string account, string flowtingAccount1, string flowtingAccount2, string flowtingAccount3, string flowtingAccount4, string flowtingAccount5) {
            return base.Channel.GetAccountTransactionsAsync(fiscalPeriod, startDate, endDate, account, flowtingAccount1, flowtingAccount2, flowtingAccount3, flowtingAccount4, flowtingAccount5);
        }
        
        public string AddAccount(string parentCode, int fiscalPeriod, string name) {
            return base.Channel.AddAccount(parentCode, fiscalPeriod, name);
        }
        
        public System.Threading.Tasks.Task<string> AddAccountAsync(string parentCode, int fiscalPeriod, string name) {
            return base.Channel.AddAccountAsync(parentCode, fiscalPeriod, name);
        }
        
        public string AddFloatingAccount(string parentCode, int fiscalPeriod, string name) {
            return base.Channel.AddFloatingAccount(parentCode, fiscalPeriod, name);
        }
        
        public System.Threading.Tasks.Task<string> AddFloatingAccountAsync(string parentCode, int fiscalPeriod, string name) {
            return base.Channel.AddFloatingAccountAsync(parentCode, fiscalPeriod, name);
        }
        
        public string AddFloatingAccountWithSpecifiedCode(string parentCode, string code, int fiscalPeriod, string name) {
            return base.Channel.AddFloatingAccountWithSpecifiedCode(parentCode, code, fiscalPeriod, name);
        }
        
        public System.Threading.Tasks.Task<string> AddFloatingAccountWithSpecifiedCodeAsync(string parentCode, string code, int fiscalPeriod, string name) {
            return base.Channel.AddFloatingAccountWithSpecifiedCodeAsync(parentCode, code, fiscalPeriod, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GlueApp.PayvastWS.GetFiscalPeriodIdResponse GlueApp.PayvastWS.AccountingServiceSoap.GetFiscalPeriodId(GlueApp.PayvastWS.GetFiscalPeriodIdRequest request) {
            return base.Channel.GetFiscalPeriodId(request);
        }
        
        public System.Nullable<int> GetFiscalPeriodId(System.Nullable<System.DateTime> date) {
            GlueApp.PayvastWS.GetFiscalPeriodIdRequest inValue = new GlueApp.PayvastWS.GetFiscalPeriodIdRequest();
            inValue.date = date;
            GlueApp.PayvastWS.GetFiscalPeriodIdResponse retVal = ((GlueApp.PayvastWS.AccountingServiceSoap)(this)).GetFiscalPeriodId(inValue);
            return retVal.GetFiscalPeriodIdResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GlueApp.PayvastWS.GetFiscalPeriodIdResponse> GlueApp.PayvastWS.AccountingServiceSoap.GetFiscalPeriodIdAsync(GlueApp.PayvastWS.GetFiscalPeriodIdRequest request) {
            return base.Channel.GetFiscalPeriodIdAsync(request);
        }
        
        public System.Threading.Tasks.Task<GlueApp.PayvastWS.GetFiscalPeriodIdResponse> GetFiscalPeriodIdAsync(System.Nullable<System.DateTime> date) {
            GlueApp.PayvastWS.GetFiscalPeriodIdRequest inValue = new GlueApp.PayvastWS.GetFiscalPeriodIdRequest();
            inValue.date = date;
            return ((GlueApp.PayvastWS.AccountingServiceSoap)(this)).GetFiscalPeriodIdAsync(inValue);
        }
    }
}
